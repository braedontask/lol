private Optional<UserContextType> replaceUserContextTypeText(Optional<UserContextType> optionalUserContextType) { if (optionalUserContextType == null) { return null; } UserContextType userContextType = optionalUserContextType.orElseThrow( () -> new MedalException("Invariant Null Check") ); Integer categoryID = userContextType.categoryID(); if (categoryID != 0) { } return null; } public Map<Integer, List<RenderedUserContext>> getContexts(int userId, Set<Integer> targetUserIds, int limit, int offset) { List<Map<Integer, List<UserContext>>> allContextMaps = getAllUserContexts(userId, targetUserIds, limit, offset); Set<Integer> allTypeIds = allContextMaps.stream() .map(Map::values) .flatMap(Collection::stream) .flatMap(List::stream) .map(UserContext::contextPillId) .collect(Collectors.toSet()); Map<Integer, Optional<UserContextType>> typesByIds = userContextTypeRepository.getAll(allTypeIds) .entrySet() .stream() .collect(Collectors.toMap( item -> item.getKey(), item -> replaceUserContextTypeText(item.getValue()) ));